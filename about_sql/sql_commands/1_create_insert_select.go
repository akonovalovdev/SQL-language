package main

/*
Порядок запроса CREATE TABLE

- ключевые слова : CREATE TABLE
- имя создаваемой таблицы;
- открывающая круглая скобка «(»;
- название поля и его описание, которое включает тип поля и другие необязательные характеристики;
запятая;
- название поля и его описание;
...
- закрывающая скобка «)».
*/

// Пример запроса
// CREATE TABLE genre(
//    genre_id  SERIAL PRIMARY KEY,
//    name_genre VARCHAR(30)
/*
Запросы на создание таблицы
Новая таблица может быть создана на основе данных из другой таблицы. Для этого используется запрос SELECT,
результирующая таблица которого и будет новой таблицей базы данных. При этом имена столбцов запроса
становятся именами столбцов новой таблицы. Запрос на создание новой таблицы имеет вид:

CREATE TABLE имя_таблицы AS
SELECT ...
*/
//
//Пример
//Создать таблицу заказ (ordering), куда включить авторов и названия тех книг, количество экземпляров которых в таблице book меньше 4. Для всех книг указать одинаковое количество экземпляров 5.
//CREATE TABLE ordering AS
//SELECT author, title, 5 AS amount
//FROM book
//WHERE amount < 4;

/*
- ключевые слова INSERT INTO (ключевое слово INTO можно пропустить);
- имя таблицы, в которую добавляется запись;
- открывающая круглая скобка «(»;
- список полей через запятую, в которые следует занести новые данные;
- закрывающая скобка «)»;
- ключевое слово VALUES;
- открывающая круглая скобка «(»;
- список значений через запятую, которые заносятся в соответствующие поля, при этом текстовые значения
  заключаются в кавычки, числовые значения записываются без кавычек, в качестве разделителя целой
  и дробной части используется точка;
- закрывающая скобка «)».
*/

// Пример
// INSERT INTO genre (name_genre)
// VALUES ('Роман');

/*
 SELECT ВАРИАНТ 1
 ключевое слово SELECT;
 символ « *» ;
 ключевое слово FROM;
 имя таблицы.
*/

// Пример Выводит все данные из выбранной таблицы
// SELECT * FROM book;

/*
 SELECT ВАРИАНТ 2
 ключевое слово SELECT;
 список столбцов таблицы через запятую;
 ключевое слово FROM;
 имя таблицы.
*/

// Пример
// SELECT  title, amount FROM book;

/*
 SELECT ВАРИАНТ 3 с переименованными столбцами
 ключевое слово SELECT ;
 имя столбца;
 ключевое слово AS ;
 новое название столбца (можно русскими буквами), выводимое в результате запроса, но это должно быть одно слово, если название состоит из двух слов – соединяйте их подчеркиванием, например, Количество_книг;
 запятая;
 имя столбца;
 ....
 ключевое слово FROM ;
 имя таблицы.
*/

// Пример
// SELECT name_genre AS Имя
// FROM genre;

/*
 SELECT ВАРИАНТ 4 с указанием условия выборки WHERE
 Запрос:

 SELECT title, author, price * amount AS total
 FROM book
 WHERE price * amount > 4000;
*/

/*
ВЫБОРКА
С помощью запросов можно включать в итоговую выборку не все строки исходной таблицы, а только те,
которые отвечают некоторому условию. Для этого после указания таблицы, откуда выбираются данные,
задается ключевое слово WHERE и логическое выражение, от результата которого зависит
будет ли включена строка в выборку или нет. Если условие – истина,
то строка(запись)  включается в выборку, если ложь – нет.

Логическое выражение может включать операторы сравнения (равно «=», не равно «<>», больше «>», меньше «<»,
больше или равно«>=», меньше или равно «<=») и выражения, допустимые в SQL.

*/

//Пример
//Вывести название и цену тех книг, цены которых меньше 600 рублей.
//
//Запрос:
//SELECT title, price
//FROM book
//WHERE price < 600;

/*
Выборка данных, оператор LIKE
Оператор LIKE используется для сравнения строк. В отличие от операторов отношения равно (=) и не равно (<>), LIKE позволяет сравнивать строки не на полное совпадение (не совпадение), а в соответствии с шаблоном. Шаблон может включать обычные символы и символы-шаблоны. При сравнении с шаблоном, его обычные символы должны в точности совпадать с символами, указанными в строке. Символы-шаблоны могут совпадать с произвольными элементами символьной строки.

Символ-шаблон	Описание	Пример
%	Любая строка, содержащая ноль или более символов	SELECT * FROM book WHERE author LIKE '%М.%'
выполняет поиск и выдает все книги, инициалы авторов которых содержат «М.»
_ (подчеркивание)	Любой одиночный символ	SELECT * FROM book WHERE title LIKE 'Поэм_'
выполняет поиск и выдает все книги, названия которых либо «Поэма», либо «Поэмы» и пр.
Строчные и прописные буквы в строках эквивалентны.
*/

// Пример 1
// Вывести названия книг, начинающихся с буквы «Б».

//SELECT title
//FROM book
//WHERE title LIKE 'Б%';
///* эквивалентное условие
//title LIKE 'б%'
//*/

//Пример 2
//Вывести название книг, состоящих ровно из 5 букв.
//
//SELECT title FROM book
//WHERE title LIKE "_____"

/*
Чтобы отобрать уникальные элементы некоторого столбца используется ключевое слово DISTINCT,
которое размещается сразу после SELECT.

Другой способ – использование оператора GROUP BY, который группирует данные при выборке,
имеющие одинаковые значения в некотором столбце.
Столбец, по которому осуществляется группировка, указывается после GROUP BY .

С помощью GROUP BY можно выбрать уникальные элементы столбца, по которому осуществляется группировка.
Результат будет точно такой же как при использовании DISTINCT.

Если названия книг для одного и того же автора повторяются, а требуется посчитать количество уникальных наименований,
можно использовать ключевое слово DISTINCT в агрегатной функции (и не только в COUNT).

DISTINCT не позволит производить вычисления с помощью функций, в том числе COUNT или SUM
Вот такая запись здесь не сработает
SELECT DISTINCT author, COUNT(title), SUM(amount)
FROM book;
*/

// Пример 1
// Выбрать различных авторов, книги которых хранятся в таблице book.
//
// SELECT DISTINCT author
// FROM book;

// Пример 2
//
// SELECT  author
// FROM book
// GROUP BY author;

/*
Выборка данных, групповые функции MIN, MAX и AVG
К групповым функциям SQL относятся: MIN(), MAX() и AVG(), которые вычисляют минимальное,
максимальное и среднее значение элементов столбца, относящихся к группе.
*/

//Пример
//Вывести минимальную цену книги каждого автора
//
//SELECT author, MIN(price) AS min_price,  count(*), MAX(price) AS max_price, AVG(price) AS СРЕДНЕЕ
//FROM book
//GROUP BY author;

/*
Групповые функции позволяют вычислять итоговые значения по всей таблице. Например, можно посчитать общее
количество книг на складе, вычислить суммарную стоимость и пр. Для этого после ключевого слова SELECT
указывается групповая функция для выражения или имени столбца, а ключевые слова GROUP BY опускаются.

Результатом таких запросов является единственная строка с вычисленными по таблице значениями.
*/

//Пример
//Посчитать количество экземпляров книг на складе.

//SELECT SUM(amount) AS Количество
//FROM book;

/*
Добавление записей из другой таблицы
С помощью запроса на добавление можно не только добавить в таблицу конкретные значения (список VALUES),
но и записи из другой таблицы, отобранные с помощью запроса на выборку.
В этом случае вместо раздела VALUES записывается запрос на выборку, начинающийся с SELECT.
В нем можно использовать WHERE, GROUP BY, ORDER BY.

Правила соответствия между полями таблицы и вставляемыми значениями из запроса:

количество полей в таблице и количество полей в запросе должны совпадать;
должно существовать прямое соответствие между позицией одного и того же элемента в обоих списках,
поэтому первый столбец запроса должен относиться к первому столбцу
в списке столбцов таблицы, второй – ко второму столбцу и т.д.

типы столбцов запроса должны быть совместимы с типами данных соответствующих столбцов таблицы
( целое число можно занести в поле типа DECIMAL, обратная операция – недопустима).

В запросах на добавление можно использовать вложенные запросы.
*/
//Пример
//Занести из таблицы supply в таблицу book только те книги, названия которых отсутствуют в таблице book.
//INSERT INTO book (title, author, price, amount)
//SELECT title, author, price, amount
//FROM supply
//WHERE title NOT IN (
//SELECT title
//FROM book
//);
