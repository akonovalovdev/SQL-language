package main

/*
Порядок запроса CREATE TABLE

- ключевые слова : CREATE TABLE
- имя создаваемой таблицы;
- открывающая круглая скобка «(»;
- название поля и его описание, которое включает тип поля и другие необязательные характеристики;
запятая;
- название поля и его описание;
...
- закрывающая скобка «)».
*/

// Пример запроса
// CREATE TABLE genre(
//    genre_id  SERIAL PRIMARY KEY,
//    name_genre VARCHAR(30)
// );

/*
- ключевые слова INSERT INTO (ключевое слово INTO можно пропустить);
- имя таблицы, в которую добавляется запись;
- открывающая круглая скобка «(»;
- список полей через запятую, в которые следует занести новые данные;
- закрывающая скобка «)»;
- ключевое слово VALUES;
- открывающая круглая скобка «(»;
- список значений через запятую, которые заносятся в соответствующие поля, при этом текстовые значения
  заключаются в кавычки, числовые значения записываются без кавычек, в качестве разделителя целой
  и дробной части используется точка;
- закрывающая скобка «)».
*/

// Пример
// INSERT INTO genre (name_genre)
// VALUES ('Роман');

/*
 SELECT ВАРИАНТ 1
 ключевое слово SELECT;
 символ « *» ;
 ключевое слово FROM;
 имя таблицы.
*/

// Пример Выводит все данные из выбранной таблицы
// SELECT * FROM book;

/*
 SELECT ВАРИАНТ 2
 ключевое слово SELECT;
 список столбцов таблицы через запятую;
 ключевое слово FROM;
 имя таблицы.
*/

// Пример
// SELECT  title, amount FROM book;

/*
 SELECT ВАРИАНТ 3 с переименованными столбцами
 ключевое слово SELECT ;
 имя столбца;
 ключевое слово AS ;
 новое название столбца (можно русскими буквами), выводимое в результате запроса, но это должно быть одно слово, если название состоит из двух слов – соединяйте их подчеркиванием, например, Количество_книг;
 запятая;
 имя столбца;
 ....
 ключевое слово FROM ;
 имя таблицы.
*/

// Пример
// SELECT name_genre AS Имя
// FROM genre;

/*
 SELECT ВАРИАНТ 4 с указанием условия выборки WHERE
 Запрос:

 SELECT title, author, price * amount AS total
 FROM book
 WHERE price * amount > 4000;
*/

/*
ВЫБОРКА
С помощью запросов можно включать в итоговую выборку не все строки исходной таблицы, а только те,
которые отвечают некоторому условию. Для этого после указания таблицы, откуда выбираются данные,
задается ключевое слово WHERE и логическое выражение, от результата которого зависит
будет ли включена строка в выборку или нет. Если условие – истина,
то строка(запись)  включается в выборку, если ложь – нет.

Логическое выражение может включать операторы сравнения (равно «=», не равно «<>», больше «>», меньше «<»,
больше или равно«>=», меньше или равно «<=») и выражения, допустимые в SQL.

*/

//Пример
//Вывести название и цену тех книг, цены которых меньше 600 рублей.
//
//Запрос:
//SELECT title, price
//FROM book
//WHERE price < 600;

/*
Выборка данных, оператор LIKE
Оператор LIKE используется для сравнения строк. В отличие от операторов отношения равно (=) и не равно (<>), LIKE позволяет сравнивать строки не на полное совпадение (не совпадение), а в соответствии с шаблоном. Шаблон может включать обычные символы и символы-шаблоны. При сравнении с шаблоном, его обычные символы должны в точности совпадать с символами, указанными в строке. Символы-шаблоны могут совпадать с произвольными элементами символьной строки.

Символ-шаблон	Описание	Пример
%	Любая строка, содержащая ноль или более символов	SELECT * FROM book WHERE author LIKE '%М.%'
выполняет поиск и выдает все книги, инициалы авторов которых содержат «М.»
_ (подчеркивание)	Любой одиночный символ	SELECT * FROM book WHERE title LIKE 'Поэм_'
выполняет поиск и выдает все книги, названия которых либо «Поэма», либо «Поэмы» и пр.
*/
