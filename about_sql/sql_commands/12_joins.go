package main

/*  Соединение INNER JOIN
Оператор внутреннего соединения INNER JOIN соединяет две таблицы.
Порядок таблиц для оператора неважен, поскольку оператор является симметричным.

SELECT
 ...
FROM
   таблица_1 INNER JOIN  таблица_2
   ON условие
...
Результат запроса формируется так:

Каждая строка одной таблицы сопоставляется с каждой строкой второй таблицы;
для полученной «соединённой» строки проверяется условие соединения;
Если условие истинно, в таблицу результата добавляется соответствующая «соединённая» строка;
*/

// Пример
// Вывести название книг и их авторов.
//
// SELECT title, name_author
// FROM
//    author INNER JOIN book
//    ON author.author_id = book.author_id;
//
// Поскольку поля author_id в таблицах book и author называются одинаково,
// необходимо в запросах указывать полную ссылку на них (book.author_id и author.author_id).

/*Внешнее соединение LEFT и RIGHT OUTER JOIN
Оператор внешнего соединения LEFT OUTER JOIN  (можно использовать LEFT JOIN) соединяет две таблицы.
Порядок таблиц для оператора важен, поскольку оператор не является симметричным.

SELECT
 ...
FROM
    таблица_1 LEFT JOIN  таблица_2
    ON условие
...
Результат запроса формируется так:

в результат включается внутреннее соединение (INNER JOIN) первой и второй таблицы в соответствии с условием;
затем в результат добавляются те записи первой таблицы, которые не вошли во внутреннее соединение на шаге 1,
для таких записей соответствующие поля второй таблицы заполняются значениями NULL.
Соединение RIGHT JOIN действует аналогично, только в пункте 2 первая таблица меняется на вторую и наоборот.
*/

// Задание
// Вывести название всех книг каждого автора, если книг некоторых авторов
// в данный момент нет на складе – вместо названия книги указать Null.
//
// SELECT name_author, title
// FROM author LEFT JOIN book
//     ON author.author_id = book.author_id
// ORDER BY name_author;

/* Перекрестное соединение CROSS JOIN
Оператор перекрёстного соединения, или декартова произведения CROSS JOIN
(в запросе вместо ключевых слов можно поставить запятую между таблицами) соединяет две таблицы.
Порядок таблиц для оператора неважен, поскольку оператор является симметричным. Его структура:

SELECT
 ...
FROM
    таблица_1 CROSS JOIN  таблица_2
...
или

SELECT
 ...
FROM
    таблица_1, таблица_2
...

Результат запроса формируется так: каждая строка одной таблицы соединяется с каждой строкой другой таблицы,
формируя  в результате все возможные сочетания строк двух таблиц.

Например, запрос:

 SELECT name_author, name_genre
 FROM
    author, genre;
 каждому автору из таблицы author поставит в соответствие все возможные жанры из таблицы genre:
*/

/* Запросы на выборку из нескольких таблиц
Запрос на выборку может выбирать данные из двух и более таблиц базы данных.
При этом таблицы должны быть логически связаны между собой. Для каждой пары таблиц, включаемых в запрос,
необходимо указать свой оператор соединения. Наиболее распространенным является внутреннее соединение INNER JOIN,
поэтому в примерах будем использовать его.

Пусть таблицы связаны между собой следующим образом:
*/

// SELECT
// ...
// FROM
//    first
//    INNER JOIN  second ON first.first_id = second.first_id
//    INNER JOIN  third  ON second.second_id = third.second_id
// ...

/*Операция соединение, использование USING()

При описании соединения таблиц с помощью JOIN в некоторых случаях вместо ON и следующего
за ним условия можно использовать оператор USING().

USING позволяет указать набор столбцов, которые есть в обеих объединяемых таблицах.
Если база данных хорошо спроектирована, а каждый внешний ключ имеет такое же имя,
как и соответствующий первичный ключ (например, genre.genre_id = book.genre_id),
тогда можно использовать предложение USING для реализации операции JOIN.

При этом после SELECT, при использовании столбцов из USING(),
необязательно указывать, из какой именно таблицы берется столбец.
*/

// Пример
// Вывести название книг, фамилии и id их авторов.
//
// Вариант с ON
// SELECT title, name_author, author.author_id  явно указать таблицу - обязательно
// FROM
// author INNER JOIN book
// ON author.author_id = book.author_id;
//
// Вариант с USING
// SELECT title, name_author, author_id  имя таблицы, из которой берется author_id, указывать не обязательно
// FROM
// author INNER JOIN book
// USING(author_id);
